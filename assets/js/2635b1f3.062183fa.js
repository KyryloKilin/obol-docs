"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[50199],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return a?r.createElement(h,i(i({ref:t},u),{},{components:a})):r.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6215:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const l={sidebar_position:1,description:"Test the solo cluster locally"},i="Run a test cluster locally",o={unversionedId:"int/quickstart/alone/test-locally",id:"int/quickstart/alone/test-locally",title:"Run a test cluster locally",description:"Test the solo cluster locally",source:"@site/docs/int/quickstart/alone/test-locally.md",sourceDirName:"int/quickstart/alone",slug:"/int/quickstart/alone/test-locally",permalink:"/docs/next/int/quickstart/alone/test-locally",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/docs/int/quickstart/alone/test-locally.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Test the solo cluster locally"},sidebar:"tutorialSidebar",previous:{title:"Quickstart Guides",permalink:"/docs/next/int/quickstart/"},next:{title:"Create the private key shares",permalink:"/docs/next/int/quickstart/alone/create-keys"}},s={},c=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Create the key shares locally",id:"create-the-key-shares-locally",level:2},{value:"Start the cluster",id:"start-the-cluster",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"run-a-test-cluster-locally"},"Run a test cluster locally"),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This is a demo repo to understand how Distributed Validators work and is not suitable for a production deployment."),(0,n.kt)("p",{parentName:"admonition"},"This guide only runs one Execution Client, one Consensus Client, and 6 Distributed Validator Charon Client + Validator Client pairs on a single docker instance. As a consequence, if this machine fails, there will not be fault tolerance."),(0,n.kt)("p",{parentName:"admonition"},"Follow these two guides sequentially instead for production deployment: ",(0,n.kt)("a",{parentName:"p",href:"/docs/next/int/quickstart/alone/create-keys"},"create keys centrally")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/next/int/quickstart/alone/deploy"},"how to deploy them"),". ")),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},(0,n.kt)("inlineCode",{parentName:"a"},"charon-distributed-validator-cluster"))," repo contains six charon clients in separate docker containers along with an execution client and consensus client, simulating a Distributed Validator cluster running."),(0,n.kt)("p",null,"The default cluster consists of:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/NethermindEth/nethermind"},"Nethermind"),", an execution layer client"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse"),", a consensus layer client"),(0,n.kt)("li",{parentName:"ul"},"Six ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ObolNetwork/charon"},"charon")," nodes"),(0,n.kt)("li",{parentName:"ul"},"A mixture of validator clients:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"VC0: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,n.kt)("li",{parentName:"ul"},"vc1: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,n.kt)("li",{parentName:"ul"},"vc2: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/nimbus-eth2"},"Nimbus")),(0,n.kt)("li",{parentName:"ul"},"vc3: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,n.kt)("li",{parentName:"ul"},"vc4: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,n.kt)("li",{parentName:"ul"},"vc5: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/status-im/nimbus-eth2"},"Nimbus"))))),(0,n.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Ensure you have ",(0,n.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"docker")," installed."),(0,n.kt)("li",{parentName:"ul"},"Ensure you have ",(0,n.kt)("a",{parentName:"li",href:"https://git-scm.com/downloads"},"git")," installed. "),(0,n.kt)("li",{parentName:"ul"},"Make sure ",(0,n.kt)("inlineCode",{parentName:"li"},"docker")," is running before executing the commands below.")),(0,n.kt)("h2",{id:"create-the-key-shares-locally"},"Create the key shares locally"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Clone the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},"charon-distributed-validator-cluster")," repo and ",(0,n.kt)("inlineCode",{parentName:"p"},"cd")," into the directory."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"# Clone the repo\ngit clone https://github.com/ObolNetwork/charon-distributed-validator-cluster.git\n\n# Change directory\ncd charon-distributed-validator-cluster/\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Prepare the environment variables"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"# Copy the sample environment variables\ncp .env.sample .env\n")),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},".env.sample")," is a sample environment file that allows overriding default configuration defined in ",(0,n.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Uncomment and set any variable to override its value.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create the artifacts needed to run a DV cluster by running the following command:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'# Enter required validator addresses\nWITHDRAWAL_ADDR=<ENTER YOUR WITHDRAWAL ADDRESS HERE>\nFEE_RECIPIENT_ADDR=<ENTER YOUR FEE RECIPIENT ADDRESS HERE>\n\n# Create a distributed validator cluster\ndocker run --rm -v "$(pwd):/opt/charon" obolnetwork/charon:v0.17.0 create cluster --name="mycluster" --withdrawal-addresses="${WITHDRAWAL_ADDR}" --fee-recipient-addresses="${FEE_RECIPIENT_ADDR}" --nodes 6 --threshold 5 --network goerli --num-validators=1\n')))),(0,n.kt)("p",null,"These commands will create six folders, one for each node created."),(0,n.kt)("p",null,"Each folder contains partial private keys that together make up the distributed validator described in ",(0,n.kt)("inlineCode",{parentName:"p"},".charon/cluster/cluster-lock.json"),"."),(0,n.kt)("h2",{id:"start-the-cluster"},"Start the cluster"),(0,n.kt)("p",null,"Run this command to start your cluster containers"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"# Start the distributed validator cluster\ndocker compose up --build\n")),(0,n.kt)("p",null,"Check the monitoring dashboard and see if things look all right"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"# Open Grafana\nopen http://localhost:3000/d/laEp8vupp\n")))}p.isMDXComponent=!0}}]);