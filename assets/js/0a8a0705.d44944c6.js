"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[622],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),h=n,k=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return r?a.createElement(k,i(i({ref:t},u),{},{components:r})):a.createElement(k,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},83049:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=r(83117),n=r(80102),o=(r(67294),r(3905)),i=["components"],l={sidebar_position:4,description:"Run all nodes in a distributed validator cluster"},s="Run a cluster alone",c={unversionedId:"int/quickstart/quickstart-alone",id:"int/quickstart/quickstart-alone",title:"Run a cluster alone",description:"Run all nodes in a distributed validator cluster",source:"@site/docs/int/quickstart/quickstart-alone.md",sourceDirName:"int/quickstart",slug:"/int/quickstart/quickstart-alone",permalink:"/docs/next/int/quickstart/quickstart-alone",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/docs/int/quickstart/quickstart-alone.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Run all nodes in a distributed validator cluster"},sidebar:"tutorialSidebar",previous:{title:"CLI",permalink:"/docs/next/int/quickstart/group/quickstart-group-cli"},next:{title:"Run a cluster with MEV-Boost",permalink:"/docs/next/int/quickstart/quickstart-builder-api"}},u={},d=[{value:"Distributed Validator Cluster",id:"distributed-validator-cluster",level:2},{value:"Create Distributed Validator Keys",id:"create-distributed-validator-keys",level:2},{value:"Activate your validator",id:"activate-your-validator",level:3},{value:"Import Existing Validator Keys",id:"import-existing-validator-keys",level:2}],p={toc:d};function h(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"run-a-cluster-alone"},"Run a cluster alone"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Charon is in an early alpha state and is not ready to be run on mainnet")),(0,o.kt)("p",null,"Ensure you have ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/"},"docker")," and ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/downloads"},"git")," installed. Also, make sure ",(0,o.kt)("inlineCode",{parentName:"p"},"docker")," is running before executing the commands below."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},"charon-distributed-validator-cluster")," repo and ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," into the directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# Clone the repo\ngit clone https://github.com/ObolNetwork/charon-distributed-validator-cluster.git\n\n# Change directory\ncd charon-distributed-validator-cluster/\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Prepare the environment variables"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# Copy the sample environment variables\ncp .env.sample .env\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},".env.sample")," is a sample environment file that allows overriding default configuration defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Uncomment and set any variable to override its value.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the artifacts needed to run a testnet distributed validator cluster"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'# Create a testnet distributed validator cluster\ndocker run --rm -v "$(pwd):/opt/charon" ghcr.io/obolnetwork/charon:v0.11.0 create cluster --withdrawal-address="0x000000000000000000000000000000000000dead" --nodes 6 --threshold 5\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Start the cluster"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# Start the distributed validator cluster\ndocker-compose up --build\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Checkout the monitoring dashboard and see if things look all right"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"# Open Grafana\nopen http://localhost:3000/d/laEp8vupp\n")))),(0,o.kt)("p",null,"If all the above went correctly, it's natural to see logs like:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'INFO sched      No active DVs for slot {"slot": 3288627}')),(0,o.kt)("p",null,"This is because you need to activate your freshly created distributed validator on the testnet with the ",(0,o.kt)("a",{parentName:"p",href:"https://prater.launchpad.ethereum.org/en/"},"existing launchpad"),". The validator deposit data should be in ",(0,o.kt)("inlineCode",{parentName:"p"},".charon/cluster/deposit-data.json"),"."),(0,o.kt)("h2",{id:"distributed-validator-cluster"},"Distributed Validator Cluster"),(0,o.kt)("p",null,"The default cluster consists of:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/NethermindEth/nethermind"},"Nethermind"),", an execution layer client"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse"),", a consensus layer client"),(0,o.kt)("li",{parentName:"ul"},"Six ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ObolNetwork/charon"},"charon")," nodes"),(0,o.kt)("li",{parentName:"ul"},"Mixture of validator clients:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"vc0: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,o.kt)("li",{parentName:"ul"},"vc1: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,o.kt)("li",{parentName:"ul"},"vc2: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/attestantio/vouch"},"Vouch")),(0,o.kt)("li",{parentName:"ul"},"vc3: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,o.kt)("li",{parentName:"ul"},"vc4: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,o.kt)("li",{parentName:"ul"},"vc5: ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/attestantio/vouch"},"Vouch"))))),(0,o.kt)("p",null,"The intention is to support all validator clients, and work is underway to add support for lodestar to this repo, with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster/issues/67"},"nimbus")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster/issues/68"},"prysm")," support to follow in the future. Read more about our client support ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon#supported-consensus-layer-clients"},"here"),"."),(0,o.kt)("h2",{id:"create-distributed-validator-keys"},"Create Distributed Validator Keys"),(0,o.kt)("p",null,"Create some testnet private keys for a six node distributed validator cluster with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'docker run --rm -v "$(pwd):/opt/charon" ghcr.io/obolnetwork/charon:v0.11.0 create cluster --withdrawal-address="0x000000000000000000000000000000000000dead" --nodes 6 --threshold 5\n')),(0,o.kt)("p",null,"This command will create a subdirectory ",(0,o.kt)("inlineCode",{parentName:"p"},".charon/cluster"),". In it are six folders, one for each charon node created. Each folder contains partial private keys that together make up the distributed validator described in ",(0,o.kt)("inlineCode",{parentName:"p"},".charon/cluster/cluster-lock.json"),"."),(0,o.kt)("h3",{id:"activate-your-validator"},"Activate your validator"),(0,o.kt)("p",null,"Along with the private keys and cluster lock file is a validator deposit data file located at ",(0,o.kt)("inlineCode",{parentName:"p"},".charon/cluster/deposit-data.json"),". You can use the original ",(0,o.kt)("a",{parentName:"p",href:"https://prater.launchpad.ethereum.org/"},"staking launchpad")," app to activate your new validator with the original UI."),(0,o.kt)("p",null,"Your deposit will take at minimum 8 hours to process, near to the time you can run this new cluster with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker-compose up --build\n")),(0,o.kt)("h2",{id:"import-existing-validator-keys"},"Import Existing Validator Keys"),(0,o.kt)("p",null,"You might already have keys to an active validator, or are more comfortable creating keys with existing tooling like the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ethereum/staking-deposit-cli"},"staking deposit CLI")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wealdtech/ethdo"},"ethdo"),"."),(0,o.kt)("p",null,"To import existing EIP-2335 validator key stores:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Create a folder within this checked out repo\nmkdir split_keys\n\n# Put the validator keystore.json files in this folder.\n# Alongside them, with a matching filename but ending with `.txt` should be the password to the keystore.\n# E.g. keystore-0.json keystore-0.txt\n\n# Split these keystores into "n" (--nodes) key shares with "t" (--threshold) as threshold for a distributed validator\ndocker run --rm  -v $(pwd):/opt/charon ghcr.io/obolnetwork/charon:v0.11.0 create cluster --split-existing-keys --split-keys-dir=/opt/charon/split_keys --threshold 4 --nodes 6\n\n# The above command will create 4 validator keys along with cluster-lock.json and deposit-data.json in ./.charon/cluster : \n# .charon/cluster/\n# \u251c\u2500 cluster-lock.json  Cluster lock defines the cluster lock file which is signed by all nodes\n# \u251c\u2500 deposit-data.json  Deposit data file is used to activate a Distributed Validator on DV Launchpad\n# \u251c\u2500 node[0-5]/     Directory for each node\n# \u2502  \u251c\u2500 charon-enr-private-key      Charon networking private key for node authentication\n# \u2502  \u251c\u2500 validator_keys      Validator keystores and password\n# \u2502  \u2502  \u251c\u2500 keystore-*.json  Validator private share key for duty signing\n# \u2502  \u2502  \u251c\u2500 keystore-*.txt   Keystore password files for keystore-*.json\n')))}h.isMDXComponent=!0}}]);