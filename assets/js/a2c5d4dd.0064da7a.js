"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[2705],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),h=i,b=p["".concat(s,".").concat(h)]||p[h]||d[h]||r;return a?n.createElement(b,o(o({ref:t},c),{},{components:a})):n.createElement(b,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9822:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],l={sidebar_position:6,description:"Run a distributed validator cluster with the builder API (MEV-Boost)"},s="Run a cluster with MEV-Boost",u={unversionedId:"int/quickstart/quickstart-builder-api",id:"int/quickstart/quickstart-builder-api",title:"Run a cluster with MEV-Boost",description:"Run a distributed validator cluster with the builder API (MEV-Boost)",source:"@site/docs/int/quickstart/quickstart-builder-api.md",sourceDirName:"int/quickstart",slug:"/int/quickstart/quickstart-builder-api",permalink:"/docs/next/int/quickstart/quickstart-builder-api",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/docs/int/quickstart/quickstart-builder-api.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,description:"Run a distributed validator cluster with the builder API (MEV-Boost)"},sidebar:"tutorialSidebar",previous:{title:"Run a cluster with others",permalink:"/docs/next/int/quickstart/quickstart-group"},next:{title:"Working groups",permalink:"/docs/next/int/working-groups"}},c={},d=[{value:"Getting started with Charon &amp; the Builder API",id:"getting-started-with-charon--the-builder-api",level:2},{value:"Configuring Charon",id:"configuring-charon",level:2},{value:"Configuring Validator Clients",id:"configuring-validator-clients",level:2},{value:"Teku Validator Client",id:"teku-validator-client",level:3},{value:"Lighthouse Validator Client",id:"lighthouse-validator-client",level:3}],p={toc:d};function h(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"run-a-cluster-with-mev-boost"},"Run a cluster with MEV-Boost"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Charon is in an early alpha state and is not ready to be run on mainnet. Charon's integration with MEV-Boost is also in an alpha state and requires a non-trivial amount of configuration to get working successfully. In future this process aims to be much more automated and seamless from the users perspective.")),(0,r.kt)("p",null,"This quickstart guide focuses on configuring the builder API for a validator and assumes you already have a cluster up and running."),(0,r.kt)("h2",{id:"getting-started-with-charon--the-builder-api"},"Getting started with Charon & the Builder API"),(0,r.kt)("p",null,'Running a distributed validator cluster with the builder API enabled will give the validators in the cluster access to the builder network. This builder network is a network of "Block Builders" who work with MEV searchers to produce the most valuable blocks a validator can propose. ',(0,r.kt)("a",{parentName:"p",href:"https://boost.flashbots.net/"},"MEV-Boost"),' is a product from flashbots that enables you to ask multiple block relays (who communicate with the "Block Builders") for blocks to propose. The block that pays the largest reward to the validator will be signed and returned to the relay for broadcasting to the wider network. The end result for the validator is generally an increased APY as they receive some share of the MEV.'),(0,r.kt)("h2",{id:"configuring-charon"},"Configuring Charon"),(0,r.kt)("p",null,"To configure Charon to use the builder API you simply need to add one flag to the ",(0,r.kt)("inlineCode",{parentName:"p"},"charon run")," command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"charon run --builder-api\n")),(0,r.kt)("h2",{id:"configuring-validator-clients"},"Configuring Validator Clients"),(0,r.kt)("p",null,"Currently Charon with the builder API enabled is comaptible with two validator clients, Teku (develop branch) & Lighthouse (unstable branch) and requires a decent amount of manual configuration. Work is underway ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon#project-status"},"to support")," all validator client implementations in an mev-enabled distributed validator cluster seamlessly."),(0,r.kt)("h3",{id:"teku-validator-client"},"Teku Validator Client"),(0,r.kt)("p",null,"For now you must use the ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/consensys/teku/tags"},"develop branch / container image")," of Teku to have access to the changes that enable compatibility."),(0,r.kt)("p",null,"Configuring the Teku validator client with Charon follows exactly the same process as their ",(0,r.kt)("a",{parentName:"p",href:"https://hackmd.io/@StefanBratanov/BkMlo1RO9"},"official guide")," with 2 further conditions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First the validator client must be set up to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"proposerConfig.json")," structure. This involves including the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/#validators-proposer-config"},(0,r.kt)("inlineCode",{parentName:"a"},"--validators-proposer-config"))," flag on the validator client."),(0,r.kt)("li",{parentName:"ul"},"Second the ",(0,r.kt)("inlineCode",{parentName:"li"},"--validators-proposer-config")," flag must be equal to ",(0,r.kt)("inlineCode",{parentName:"li"},"http://$CHARON_ENDPOINT:3600/teku_proposer_config"))),(0,r.kt)("p",null,"With these 2 conditions in places Charon validators will be able to register to the builder network, submit blinded block and gain a share of the MEV profits."),(0,r.kt)("h3",{id:"lighthouse-validator-client"},"Lighthouse Validator Client"),(0,r.kt)("p",null,"For Lighthouse currently you must use the ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/sigp/lighthouse/tags"},"unstable branch / container image")," to have access to the changes that enable compatibility."),(0,r.kt)("p",null,"Configuring the Lightouse validator client with Charon follows exactly the same process as their ",(0,r.kt)("a",{parentName:"p",href:"https://lighthouse-book.sigmaprime.io/builders.html"},"official guide")," with some additional conditions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The validator client must be set up to use a custom ",(0,r.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/validator-management.html"},"validator_definitions.yml"),"."),(0,r.kt)("li",{parentName:"ul"},"The flag ",(0,r.kt)("inlineCode",{parentName:"li"},"--builder-registration-timestamp-override")," must be set and the assigned value must be the same across all validator clients."),(0,r.kt)("li",{parentName:"ul"},"The custom validator_definitions.yml must be placed in the ",(0,r.kt)("inlineCode",{parentName:"li"},"--validators-dir")," of lighthouse."),(0,r.kt)("li",{parentName:"ul"},"The custom validator_definitions.yml must follow the structure below, where ",(0,r.kt)("inlineCode",{parentName:"li"},"voting_public_key")," is the pubkeyshare on the validator client and ",(0,r.kt)("inlineCode",{parentName:"li"},"builder_pubkey_override")," is the associated aggregate pubkey the network will find. You can find these pubkeyshare to aggregate pubkey mapping in the ",(0,r.kt)("inlineCode",{parentName:"li"},"cluster-lock.json")," file created during the DKG process.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- enabled: true\n  voting_public_key: 0xa6469d287f26ecb36049b79b408e25738a0e159980f32fb659174416b9e0e8f7f8ecc55d01a54528c16c138bb1201eaf\n  type: local_keystore\n  voting_keystore_path: /data/lighthouse/validator_keys/keystore-0.json\n  voting_keystore_password_path: /data/lighthouse/validator_keys/keystore-0.txt\n  suggested_fee_recipient: 0x000000000000000000000000dec0ded0b0115ace\n  gas_limit: 30000000\n  builder_proposals: true\n  builder_pubkey_override: 0xa878c8ec402799536f0b94967e578fdbcd84828f564d604f0db491979438357b797491399be1f22de8a44673f14c087e\n- enabled: true\n  voting_public_key: 0x821ec75ca12057b484906a492ea3448387065a9466c348e81e72f23139e7abdf2f38854cc9dea8d51ca615cbe15f9d2c\n  type: local_keystore\n  voting_keystore_path: /data/lighthouse/validator_keys/keystore-1.json\n  voting_keystore_password_path: /data/lighthouse/validator_keys/keystore-1.txt\n  suggested_fee_recipient: 0x000000000000000000000000dec0ded0b0115ace\n  gas_limit: 30000000\n  builder_proposals: true\n  builder_pubkey_override: 0x93e600b9836acda0e7781dc50268478b13c2a73fa470728b8e7fd06f31d62ddbdf831cbf5b7a828276a2218f2016a2fa\n- enabled: true\n  voting_public_key: 0xa5581286066c5251fbc7c2a6685a9ccce951ccb9b6e449a3f90c33c971dac9b297f9a7a3f9394c8a43822ff0f2cfded1\n  type: local_keystore\n  voting_keystore_path: /data/lighthouse/validator_keys/keystore-2.json\n  voting_keystore_password_path: /data/lighthouse/validator_keys/keystore-2.txt\n  suggested_fee_recipient: 0x000000000000000000000000dec0ded0b0115ace\n  gas_limit: 30000000\n  builder_proposals: true\n  builder_pubkey_override: 0x8793b522c8197c047b95b6f4b3c7fd1582a2466ff96eb274ee51fc699c99cbdfeb41cf576bbbbdecf2454527083edf34\n")),(0,r.kt)("p",null,"Note the pubkeyshares in the ",(0,r.kt)("inlineCode",{parentName:"p"},"cluster-lock.json")," are base64 encoded and decode to hex. Below is a decoding example for the first ",(0,r.kt)("inlineCode",{parentName:"p"},"voting_public_key")," seen above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"echo pkadKH8m7LNgSbebQI4lc4oOFZmA8y+2WRdEFrng6Pf47MVdAaVFKMFsE4uxIB6v | base64 -d | hexdump -v -e '/1 \"%02x\" ' | (echo -n 0x && cat)\n\n-> 0xa6469d287f26ecb36049b79b408e25738a0e159980f32fb659174416b9e0e8f7f8ecc55d01a54528c16c138bb1201eaf\n")),(0,r.kt)("p",null,"Feel free to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"voting_keystore_path"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"suggested_fee_recipient")," etc. to whatever you have set up for your environment. Note that there either needs to be a different ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_definitions.yml")," on each distributed validator based on the keys it holds or a single ",(0,r.kt)("inlineCode",{parentName:"p"},"validator_definitions.yml")," file can be used but you must ensure no collisions on the ",(0,r.kt)("inlineCode",{parentName:"p"},"voting_keystore_path")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"voting_keystore_password_path"),"."))}h.isMDXComponent=!0}}]);